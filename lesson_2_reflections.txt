What happens when you initialize a repository? Why do you need to do it?
- A directory .git gets created with all the metadata necessary to track changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?
- It is an intermediate step before the repository. It packs things together when you use git add.

How can you use the staging area to make sure you have one commit per logical change?
- Doing a git diff will show the diff between what is in the working directory and the staging area. If it corresponds to a logical change, I will commit it to the repository. Otherwise, I might discard some change with reset.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- When trying some experiments or something similar but not quite the same.

How do the diagrams help you visualize the branch structure?
- They help see parent / child relationships and what commits are or are not reachable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
- All the commits from both branches will be shown chronologically and conflicts will be resolved if possible.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
- It's great to do some automation, but only while the two versions can be merged correctly. Git can't always do that automatically.

git init: Initializes a directory to be a repository
git diff: Diff between the working directory and the staging area.
git diff --staged: Diff between the staging area and the most recent commit.
git reset --hard: Removes changes from the working directory and the staging area.
git checkout -b new_branch_name ( =git brannch new_branch_name + git checkout new_branch_name)
git merge <target> <branch to merge to target>
git show: diff between a commit and its parent (useful for merges, where the one below on git log is not really the parent)
git branch -d <branch to be deleted> (commits from branch are not deleted, just the label, that is, the branch)
Diagrams: https://www.gliffy.com/   http://yuml.me/diagram/activity/draw
git merge master my_branch
Conflicts:
<<<<<<< HEAD
my_branch code
||||||| merged common ancestors
code before any modifications
=======
current master code
>>>>>>> master

After solving the conflicts and saving the final version, git status will show "both modified" meaning that it's been changed in both branches.
