How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By seeing only the marginal changes.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It shows quickly how the file has evolved (hopefully, improved) over time.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    commit: user-created checkpoint (version of the content at one point in time).
    For developers: choose is better.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because in some systems files are not very interrelated.

How can you use the commands git log and git diff to view the history of files?

    I can read the message on a commit on git log and then find what changed from the previous commit by doing git diff.

How might using version control make you more confident to make changes that
could break something?

    I can always go back to a working version.

Now that you have your workspace set up, what do you want to try using Git for?

    See changes that I have made from one commit to another.


** Commit every time there is a logical change
** Repo: collection of files
** Commit: snapshop of the repository at the time of the commit
git log --stat (gives statistics of what files have changed)
git config --global color.ui auto
git diff <commit_id1> <commit_id2>
Panic! (the impossible happened)
-> That actually is a real error message, but itâ€™s not output by Git.

* git checkout <commit number>
=> Your are in detached 'HEAD' state

$ git commit --amend (to change message attached to commit)

Guidelines for commits: http://udacity.github.io/git-styleguide/
* Use a command ('add' instead of 'added' ir 'adds')

----- Setup instructions ------

Instructor Notes

Downloading necessary files

Save this file in your home directory with the name git-completion.bash.
Save this file in your home directory with the name git-prompt.sh.
Download bash_profile_course from the Downloadables section.
If you already have a file in your home directory named .bash_profile, copy the content from bash_profile_course and paste it at the bottom of .bash_profile. Otherwise, move bash_profile_course to your home directory and rename it to .bash_profile. If you use Linux, you may need to name this file .bashrc instead of .bash_profile. (If you're curious to learn more about how bash prompts work, see this page.)
Make sure you can start your editor from the terminal

If you use Sublime, you can do this by add the following line to your .bash_profile (you may need to change the path if Sublime is installed in a different location for you):

alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"
Making Git configurations

Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from the terminal.

git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3
(Instead of the first command, you may be able to use the simpler git config --global core.editor "subl -n -w" as shown in the video, but many students have found this does not work for them.)

Restart the terminal

You'll need to close and re-open the terminal before all your changes take effect.