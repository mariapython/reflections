How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By seeing only the marginal changes.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It shows quickly how the file has evolved (hopefully, improved) over time.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    commit: user-created checkpoint (version of the content at one point in time).
    For developers: choose is better.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because in some systems files are not very interrelated.

How can you use the commands git log and git diff to view the history of files?

    I can read the message on a commit on git log and then find what changed from the previous commit by doing git diff.

How might using version control make you more confident to make changes that
could break something?

    I can always go back to a working version.

Now that you have your workspace set up, what do you want to try using Git for?

    See changes that I have made from one commit to another.


** Commit every time there is a logical change
** Repo: collection of files
** Commit: snapshop of the repository at the time of the commit
git log --stat (gives statistics of what files have changed)
git config --global color.ui auto
git diff <commit_id1> <commit_id2>
Panic! (the impossible happened)
-> That actually is a real error message, but itâ€™s not output by Git.

* git checkout <commit number>
=> Your are in detached 'HEAD' state

$ git commit --amend (to change message attached to commit)